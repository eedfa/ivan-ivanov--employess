{"version":3,"sources":["requests/graphql.js","App.js","serviceWorker.js","index.js"],"names":["sendFile","gql","_templateObject","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","file","files","setState","variables","then","data","console","log","e","preventDefault","document","getElementById","graphql","sendFiles","error","catch","react_default","a","createElement","className","onSubmit","handleSubmit","bind","id","type","value","Component","compose","name","Boolean","window","location","hostname","match","linkCompose","split","query","_getMainDefinition","getMainDefinition","kind","operation","WebSocketLink","uri","options","reconnect","createUploadLink","client","ApolloClient","ssrMode","cache","InMemoryCache","link","ReactDOM","render","react_apollo_browser_umd","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"obAGA,IAAMA,QAAWC,GAAHC,KCGRC,qBACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,MAHUR,sEAMZS,GACNN,KAAKO,SAAS,CACZF,KAAMC,EAAM,KAEdN,KAAKJ,MAAMJ,SAAS,CAClBgB,UAAW,CACTH,KAAML,KAAKI,MAAMC,QAElBI,KAAK,SAAAC,GACNC,QAAQC,IAAIF,0CAGFG,GACZA,EAAEC,iBACFH,QAAQC,IAAI,WACZZ,KAAKO,SAAS,CACZF,KAAMU,SAASC,eAAe,SAASV,MAAM,KAEtBW,kBAAQzB,GACjCQ,KAAKJ,MAAMsB,UAAU,CACnBV,UAAW,CACTH,KAAML,KAAKI,MAAMC,QAElBI,KAAK,SAACC,EAAMS,GACbR,QAAQC,IAAIF,GACZC,QAAQC,IAAIO,KACXC,MAAM,SAACD,GAAYR,QAAQC,IAAIO,sCAGlC,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAQbH,EAAAC,EAAAC,cAAA,QAAME,SAAUzB,KAAK0B,aAAaC,KAAK3B,OACrCqB,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAAA,SAAOK,GAAG,QAAQC,KAAK,UAEzBR,EAAAC,EAAAC,cAAA,SAAOM,KAAK,SAASC,MAAM,qBAnDrBC,cA2DHC,oBAAQf,kBAAQzB,EAAU,CAAEyC,KAAM,cAAlCD,CAAkDrC,0CCrD7CuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECNAC,EAAcC,gBAAM,SAAAC,GAAS,IAAAC,EACLC,YAAkBF,GAAtCG,EADyBF,EACzBE,KAAMC,EADmBH,EACnBG,UACd,MAAgB,wBAATD,GAAgD,iBAAdC,GAE3C,IAAIC,IAAc,CAChBC,IAAK,8BACLC,QAAS,CACPC,WAAW,KAGfC,2BAAiB,CAAEH,IAAK,mCAElBI,EAAS,IAAIC,UAAa,CAC9BC,QAA2B,qBAAXlB,OAChBmB,MAAO,IAAIC,IACXC,KAAMjB,EACNQ,IAAK,kCACPU,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAA,eAAD,CAAgBR,OAAQA,GAAQ9B,EAAAC,EAAAC,cAACqC,EAAD,OAA0B7C,SAASC,eAAe,SDoG5F,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMtD,KAAK,SAAAuD,GACjCA,EAAaC","file":"static/js/main.8742ed98.chunk.js","sourcesContent":["\nimport gql from 'graphql-tag'\n\nconst sendFile = gql`\nmutation{\n  updateTodo(id: $id, type: $type) {\n    id\n    type\n  }\n}\n`\nexport { sendFile }\n","import React, { Component } from 'react'\nimport Dropzone from 'react-dropzone'\nimport { graphql, compose } from 'react-apollo'\nimport { sendFile } from './requests/graphql.js'\nimport './App.css'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      file: null\n    }\n  }\n  onDrop (files) {\n    this.setState({\n      file: files[0]\n    })\n    this.props.sendFile({\n      variables: {\n        file: this.state.file\n      }\n    }).then(data => {\n      console.log(data)\n    })\n  }\n  handleSubmit (e) {\n    e.preventDefault()\n    console.log('console')\n    this.setState({\n      file: document.getElementById('input').files[0]\n    })\n    const withTodoAppQuery = graphql(sendFile)\n    this.props.sendFiles({\n      variables: {\n        file: this.state.file\n      }\n    }).then((data, error) => {\n      console.log(data)\n      console.log(error)\n    }).catch((error) => { console.log(error) })\n  }\n  render () {\n    return (\n      <div className='App'>\n        <div className='dropzone'>\n          {/* the developers of Dropzone(tm) decided to push new release\n          whitout testing it and this component is broken\n          <Dropzone onDrop={this.onDrop.bind(this)}>\n            <p>FILE</p>\n          </Dropzone>\n          */\n          }\n          <form onSubmit={this.handleSubmit.bind(this)}>\n            <label>\n              upload file:\n              <input id='input' type='file' />\n            </label>\n            <input type='submit' value='Submit' />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default compose(graphql(sendFile, { name: 'sendFiles' }))(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { split } from 'apollo-link'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { ApolloProvider } from 'react-apollo'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport ApolloClient from 'apollo-client'\nimport { createUploadLink } from 'apollo-upload-client'\nimport * as serviceWorker from './serviceWorker'\nimport { getMainDefinition } from 'apollo-utilities'\nconst linkCompose = split(query => {\n  const { kind, operation } = getMainDefinition(query)\n  return kind === 'OperationDefinition' && operation === 'subscription'\n},\nnew WebSocketLink({\n  uri: 'ws://localhost:4000/graphql',\n  options: {\n    reconnect: true\n  }\n}),\ncreateUploadLink({ uri: 'http://localhost:4000/graphql' })\n)\nconst client = new ApolloClient({\n  ssrMode: typeof window !== 'undefined',\n  cache: new InMemoryCache(),\n  link: linkCompose,\n  uri: 'http://localhost:4000/graphql' })\nReactDOM.render(<ApolloProvider client={client}><App /></ApolloProvider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}